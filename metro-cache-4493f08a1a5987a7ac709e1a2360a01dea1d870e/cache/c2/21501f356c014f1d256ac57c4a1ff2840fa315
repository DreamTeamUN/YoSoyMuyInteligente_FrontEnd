__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.createComment = exports.getcomments = exports.getForEMAIL = exports.getForUSER = exports.getForTEXT = exports.getForTITLE = exports.getForID = exports.storeForDATA = exports.createPost = undefined;

    var _this = this;

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _const = _require(_dependencyMap[2], "../config/const");

    var _home = _require(_dependencyMap[3], "./home");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var FORUM_ID = 'forum_id';
    var FORUM_TITLE = 'title';
    var FORUM_TEXT = 'text';
    var FORUM_USER = 'forum_user';
    var FORUM_EMAIL = 'email';

    var createPost = exports.createPost = function createPost(titulo, texto, resumen) {
        var ID, API_ENTRADA_POST;
        return regeneratorRuntime.async(function createPost$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return regeneratorRuntime.awrap((0, _home.getID)());

                    case 3:
                        ID = _context.sent;
                        API_ENTRADA_POST = _const.API_USERS + "/" + ID + "/entradas/0/entradas";
                        _context.next = 7;
                        return regeneratorRuntime.awrap(fetch(API_ENTRADA_POST, {
                            method: 'POST',
                            headers: new Headers({
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            }),
                            body: JSON.stringify({
                                "entrada": {
                                    "nivel_acceso_id": 0,
                                    "titulo": titulo,
                                    "resumen": resumen,
                                    "texto": texto,
                                    "abierto": "true",
                                    "publicado": "true"
                                }
                            })
                        }));

                    case 7:
                        return _context.abrupt("return", _context.sent);

                    case 10:
                        _context.prev = 10;
                        _context.t0 = _context["catch"](0);
                        console.log("cratePOst | Something went wrong");

                    case 13:
                    case "end":
                        return _context.stop();
                }
            }
        }, null, _this, [[0, 10]]);
    };

    var storeForDATA = exports.storeForDATA = function storeForDATA(id, title, text, user, email) {
        return regeneratorRuntime.async(function storeForDATA$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(FORUM_ID, id.toString()));

                    case 3:
                        _context2.next = 5;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(FORUM_TITLE, title));

                    case 5:
                        _context2.next = 7;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(FORUM_TEXT, text));

                    case 7:
                        _context2.next = 9;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(FORUM_USER, user));

                    case 9:
                        _context2.next = 11;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(FORUM_EMAIL, email));

                    case 11:
                        _context2.next = 16;
                        break;

                    case 13:
                        _context2.prev = 13;
                        _context2.t0 = _context2["catch"](0);
                        console.log("something went wrong");

                    case 16:
                    case "end":
                        return _context2.stop();
                }
            }
        }, null, _this, [[0, 13]]);
    };

    var getForID = exports.getForID = function getForID() {
        var for_id;
        return regeneratorRuntime.async(function getForID$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.prev = 0;
                        _context3.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(FORUM_ID));

                    case 3:
                        for_id = _context3.sent;
                        console.log("getForID | Forum ID is: " + for_id);
                        return _context3.abrupt("return", for_id);

                    case 8:
                        _context3.prev = 8;
                        _context3.t0 = _context3["catch"](0);
                        console.log("Something went wrong");

                    case 11:
                    case "end":
                        return _context3.stop();
                }
            }
        }, null, _this, [[0, 8]]);
    };

    var getForTITLE = exports.getForTITLE = function getForTITLE() {
        var for_title;
        return regeneratorRuntime.async(function getForTITLE$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        _context4.prev = 0;
                        _context4.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(FORUM_TITLE));

                    case 3:
                        for_title = _context4.sent;
                        console.log("getForTITLE | Forum title is: " + for_title);
                        return _context4.abrupt("return", for_title);

                    case 8:
                        _context4.prev = 8;
                        _context4.t0 = _context4["catch"](0);
                        console.log("Something went wrong");

                    case 11:
                    case "end":
                        return _context4.stop();
                }
            }
        }, null, _this, [[0, 8]]);
    };

    var getForTEXT = exports.getForTEXT = function getForTEXT() {
        var for_text;
        return regeneratorRuntime.async(function getForTEXT$(_context5) {
            while (1) {
                switch (_context5.prev = _context5.next) {
                    case 0:
                        _context5.prev = 0;
                        _context5.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(FORUM_TEXT));

                    case 3:
                        for_text = _context5.sent;
                        console.log("getForTEXT | Forum text is: " + for_text);
                        return _context5.abrupt("return", for_text);

                    case 8:
                        _context5.prev = 8;
                        _context5.t0 = _context5["catch"](0);
                        console.log("Something went wrong");

                    case 11:
                    case "end":
                        return _context5.stop();
                }
            }
        }, null, _this, [[0, 8]]);
    };

    var getForUSER = exports.getForUSER = function getForUSER() {
        var for_user;
        return regeneratorRuntime.async(function getForUSER$(_context6) {
            while (1) {
                switch (_context6.prev = _context6.next) {
                    case 0:
                        _context6.prev = 0;
                        _context6.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(FORUM_USER));

                    case 3:
                        for_user = _context6.sent;
                        console.log("getForUSER | Forum user is: " + for_user);
                        return _context6.abrupt("return", for_user);

                    case 8:
                        _context6.prev = 8;
                        _context6.t0 = _context6["catch"](0);
                        console.log("Something went wrong");

                    case 11:
                    case "end":
                        return _context6.stop();
                }
            }
        }, null, _this, [[0, 8]]);
    };

    var getForEMAIL = exports.getForEMAIL = function getForEMAIL() {
        var for_email;
        return regeneratorRuntime.async(function getForEMAIL$(_context7) {
            while (1) {
                switch (_context7.prev = _context7.next) {
                    case 0:
                        _context7.prev = 0;
                        _context7.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(FORUM_EMAIL));

                    case 3:
                        for_email = _context7.sent;
                        console.log("getForEMAIL | Forum email is: " + for_email);
                        return _context7.abrupt("return", for_email);

                    case 8:
                        _context7.prev = 8;
                        _context7.t0 = _context7["catch"](0);
                        console.log("Something went wrong");

                    case 11:
                    case "end":
                        return _context7.stop();
                }
            }
        }, null, _this, [[0, 8]]);
    };

    var getcomments = exports.getcomments = function getcomments() {
        var ID, response, res;
        return regeneratorRuntime.async(function getcomments$(_context8) {
            while (1) {
                switch (_context8.prev = _context8.next) {
                    case 0:
                        _context8.next = 2;
                        return regeneratorRuntime.awrap(getForID());

                    case 2:
                        ID = _context8.sent;
                        console.log(ID);
                        _context8.next = 6;
                        return regeneratorRuntime.awrap(fetch("https://ysmiapi.herokuapp.com/entradas/3/" + ID + "/1", {
                            method: 'GET',
                            headers: new Headers({})
                        }));

                    case 6:
                        response = _context8.sent;
                        _context8.next = 9;
                        return regeneratorRuntime.awrap(response.json());

                    case 9:
                        res = _context8.sent;
                        return _context8.abrupt("return", res);

                    case 11:
                    case "end":
                        return _context8.stop();
                }
            }
        }, null, _this);
    };

    var createComment = exports.createComment = function createComment(texto) {
        var UID, FID, API_ENTRADA_POST;
        return regeneratorRuntime.async(function createComment$(_context9) {
            while (1) {
                switch (_context9.prev = _context9.next) {
                    case 0:
                        _context9.prev = 0;
                        _context9.next = 3;
                        return regeneratorRuntime.awrap((0, _home.getID)());

                    case 3:
                        UID = _context9.sent;
                        _context9.next = 6;
                        return regeneratorRuntime.awrap(getForID());

                    case 6:
                        FID = _context9.sent;
                        API_ENTRADA_POST = _const.API + "/usuarios/" + UID + "/entradas/" + FID + "/entradas";
                        console.log(API_ENTRADA_POST);
                        _context9.next = 11;
                        return regeneratorRuntime.awrap(fetch(API_ENTRADA_POST, {
                            method: 'POST',
                            headers: new Headers({
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            }),
                            body: JSON.stringify({
                                "entrada": {
                                    "nivel_acceso_id": 0,
                                    "titulo": "comentario",
                                    "resumen": "comentario",
                                    "texto": texto,
                                    "abierto": "true",
                                    "publicado": "true"
                                }
                            })
                        }));

                    case 11:
                        return _context9.abrupt("return", _context9.sent);

                    case 14:
                        _context9.prev = 14;
                        _context9.t0 = _context9["catch"](0);
                        console.log("cratePOst | Something went wrong");

                    case 17:
                    case "end":
                        return _context9.stop();
                }
            }
        }, null, _this, [[0, 14]]);
    };
});