__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = _require(_dependencyMap[0], "babel-runtime/helpers/create-class")['default'];

  var _classCallCheck = _require(_dependencyMap[1], "babel-runtime/helpers/class-call-check")['default'];

  var _defineProperty = _require(_dependencyMap[2], "babel-runtime/helpers/define-property")['default'];

  var _Object$assign2 = _require(_dependencyMap[3], "babel-runtime/core-js/object/assign")['default'];

  var _Symbol$iterator = _require(_dependencyMap[4], "babel-runtime/core-js/symbol/iterator")['default'];

  var _Object$defineProperty = _require(_dependencyMap[5], "babel-runtime/core-js/object/define-property")['default'];

  var _interopRequireDefault = _require(_dependencyMap[6], "babel-runtime/helpers/interop-require-default")['default'];

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _page = _require(_dependencyMap[7], './page');

  var _page2 = _interopRequireDefault(_page);

  var _pageTree = _require(_dependencyMap[8], './page-tree');

  var _pageTree2 = _interopRequireDefault(_pageTree);

  var _record = _require(_dependencyMap[9], './record');

  var _record2 = _interopRequireDefault(_record);

  var _cacheProperties = _require(_dependencyMap[10], './cache-properties');

  var _cacheProperties2 = _interopRequireDefault(_cacheProperties);

  var State = function () {
    function State() {
      var previous = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _classCallCheck(this, State);

      _Object$assign2(this, _defineProperty({
        _pages: new _pageTree2['default'](),
        _unfetchablePages: [],
        pageSize: 0,
        loadHorizon: previous.pageSize || 0,
        unloadHorizon: Infinity,
        readOffset: undefined,
        stats: {
          totalPages: undefined
        },
        filter: function filter() {
          return true;
        },
        records: {}
      }, _Symbol$iterator, {
        value: function value() {
          var _this2 = this;

          var index = 0;
          return {
            next: function next() {
              var value = _this2.getRecord(index);

              var done = index++ >= _this2.length;
              return {
                value: value,
                done: done
              };
            }
          };
        }
      }), previous, attrs);

      if (!this.pageSize) {
        throw new Error('created Pages without pageSize');
      }

      if (this.unloadHorizon < this.loadHorizon) {
        throw new Error('created Pages with unloadHorizon less than loadHorizon');
      }

      this._updateHorizons();

      this._pages.updateKeys();
    }

    _createClass(State, [{
      key: 'setReadOffset',
      value: function setReadOffset(readOffset) {
        return new State(this, {
          readOffset: readOffset
        });
      }
    }, {
      key: 'fetch',
      value: function fetch() {
        var fetchable = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        if (!fetchable.length) {
          return this;
        }

        var _pages = new _pageTree2['default']();

        this.pages.forEach(function (p) {
          var page = fetchable.includes(p) ? p.request() : p;

          _pages.insert(page.offset, page);
        });

        _pages.updateKeys();

        return new State(this, {
          _pages: _pages
        });
      }
    }, {
      key: 'unfetch',
      value: function unfetch() {
        var unfetchable = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        if (!unfetchable.length) {
          return this;
        }

        return new State(this, {
          _unfetchablePages: this._unfetchablePages.filter(function (p) {
            return !unfetchable.includes(p);
          })
        });
      }
    }, {
      key: 'resolve',
      value: function resolve(records, offset, stats) {
        var _this3 = this;

        var _pages = new _pageTree2['default']();

        this.pages.forEach(function (p) {
          var page = p.offset === offset ? _this3._resolvePage(p, records) : p;

          _pages.insert(p.offset, page);
        });

        _pages.updateKeys();

        return new State(this, {
          _pages: _pages,
          stats: stats || this.stats
        });
      }
    }, {
      key: 'reject',
      value: function reject(error, _ref, stats) {
        var offset = _ref.offset;

        var _pages = new _pageTree2['default']();

        this.pages.forEach(function (p) {
          var page = p.isPending && p.offset === offset ? p.reject(error) : p;

          _pages.insert(p.offset, page);
        });

        _pages.updateKeys();

        return new State(this, {
          _pages: _pages,
          stats: stats || this.stats
        });
      }
    }, {
      key: 'refilter',
      value: function refilter(filter) {
        var _this = filter ? new State(this, {
          filter: filter
        }) : this;

        var _pages = new _pageTree2['default']();

        this.pages.forEach(function (p) {
          var page = _this._resolvePage(p);

          _pages.insert(p.offset, page);
        });

        _pages.updateKeys();

        return new State(_this, {
          _pages: _pages
        });
      }
    }, {
      key: 'splice',
      value: function splice(start, deleteCount) {
        for (var _len = arguments.length, items = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          items[_key - 2] = arguments[_key];
        }

        var _this4 = this;

        var _pages = new _pageTree2['default']();

        if (start >= this.length) {
          start = this.length - 1;
        }

        if (start < 0) {
          start = 0;
        }

        var record = this.getRecord(start);

        try {
          this.pages.forEach(function (p) {
            if (p === record.page) {
              var page = undefined,
                  data = p.data.slice();
              data.splice.apply(data, [record.index, deleteCount].concat(items));
              page = _this4._resolvePage(p, data);

              _pages.insert(p.offset, page);
            } else {
              _pages.insert(p.offset, p);
            }
          });
        } catch (err) {
          throw Error('Impagination could not find resolved page for record at index ' + record.index);
        }

        return new State(this, {
          _pages: _pages
        });
      }
    }, {
      key: 'concat',
      value: function concat() {
        return Array.prototype.concat.apply(this, arguments);
      }
    }, {
      key: 'includes',
      value: function includes() {
        return Array.prototype.includes.apply(this, arguments);
      }
    }, {
      key: 'join',
      value: function join() {
        return Array.prototype.join.apply(this, arguments);
      }
    }, {
      key: 'slice',
      value: function slice() {
        return Array.prototype.slice.apply(this, arguments);
      }
    }, {
      key: 'toString',
      value: function toString() {
        return Array.prototype.toString.apply(this, arguments);
      }
    }, {
      key: 'toLocaleString',
      value: function toLocaleString() {
        return Array.prototype.toLocaleString.apply(this, arguments);
      }
    }, {
      key: 'indexOf',
      value: function indexOf() {
        return Array.prototype.indexOf.apply(this, arguments);
      }
    }, {
      key: 'lastIndexOf',
      value: function lastIndexOf() {
        return Array.prototype.lastIndexOf.apply(this, arguments);
      }
    }, {
      key: 'forEach',
      value: function forEach() {
        return Array.prototype.forEach.apply(this, arguments);
      }
    }, {
      key: 'every',
      value: function every() {
        return Array.prototype.every.apply(this, arguments);
      }
    }, {
      key: 'some',
      value: function some() {
        return Array.prototype.some.apply(this, arguments);
      }
    }, {
      key: 'filter',
      value: function filter() {
        return Array.prototype.filter.apply(this, arguments);
      }
    }, {
      key: 'find',
      value: function find() {
        return Array.prototype.find.apply(this, arguments);
      }
    }, {
      key: 'findIndex',
      value: function findIndex() {
        return Array.prototype.findIndex.apply(this, arguments);
      }
    }, {
      key: 'keys',
      value: function keys() {
        return Array.prototype.keys.apply(this, arguments);
      }
    }, {
      key: 'map',
      value: function map() {
        return Array.prototype.map.apply(this, arguments);
      }
    }, {
      key: 'reduce',
      value: function reduce() {
        return Array.prototype.reduce.apply(this, arguments);
      }
    }, {
      key: 'reduceRight',
      value: function reduceRight() {
        return Array.prototype.reduceRight.apply(this, arguments);
      }
    }, {
      key: 'values',
      value: function values() {
        return Array.prototype.values.apply(this, arguments);
      }
    }, {
      key: '_findPage',
      value: function _findPage(offset) {
        return this._pages.searchPage(offset).data;
      }
    }, {
      key: 'getPage',
      value: function getPage(offset) {
        return this._findPage(offset) || new _page2['default'](offset, this.pageSize);
      }
    }, {
      key: '_findRecord',
      value: function _findRecord(index) {
        return this._pages.searchRecord(index);
      }
    }, {
      key: 'getRecord',
      value: function getRecord(index) {
        return this._findRecord(index) || new _record2['default']();
      }
    }, {
      key: '_resolvePage',
      value: function _resolvePage(page, records) {
        records = records || page.data;

        if (records) {
          return page.resolve(records, this.filter);
        } else {
          return page;
        }
      }
    }, {
      key: '_virtualReadOffset',
      value: function _virtualReadOffset() {
        var record = this.getRecord(this.readOffset);
        var readOffset = this.readOffset;

        if (record.isResolved) {
          readOffset = record.page.offset * this.pageSize + record.index;
        }

        return readOffset;
      }
    }, {
      key: '_updateHorizons',
      value: function _updateHorizons() {
        this._unloadHorizons();

        this._requestHorizons();

        this._addIndeces();
      }
    }, {
      key: '_addIndeces',
      value: function _addIndeces() {
        var _this5 = this;

        var node = this._pages.tree.getMinKeyDescendant();

        var offset = node.key && node.key.page || 0;
        var index = offset * this.pageSize;
        this.pages.forEach(function (p) {
          var _loop = function _loop(i) {
            var offset = index++;

            _Object$defineProperty(_this5, offset, {
              enumerable: true,
              get: function get() {
                return this.getRecord(offset);
              }
            });
          };

          for (var i = 0; i < p.records.length; i++) {
            _loop(i);
          }
        });
      }
    }, {
      key: '_unloadHorizons',
      value: function _unloadHorizons() {
        var maxNode = this._pages.tree.getMaxKeyDescendant();

        var maxPageOffset = maxNode.key && maxNode.key.page || 0;

        var _getLoadHorizons2 = this._getLoadHorizons();

        var minLoadHorizon = _getLoadHorizons2.minLoadHorizon;
        var maxLoadHorizon = _getLoadHorizons2.maxLoadHorizon;

        var _getUnloadHorizons2 = this._getUnloadHorizons();

        var minUnloadHorizon = _getUnloadHorizons2.minUnloadHorizon;
        var maxUnloadHorizon = _getUnloadHorizons2.maxUnloadHorizon;
        var unfetchable = [];

        for (var i = maxPageOffset; i >= maxUnloadHorizon; i -= 1) {
          var page = this._findPage(i);

          if (page) {
            this._pages['delete'](i);

            if (page.isResolved) {
              unfetchable.push(page);
            }
          }
        }

        for (var i = maxUnloadHorizon - 1; i >= maxLoadHorizon; i -= 1) {
          var page = this._findPage(i);

          if (page && !page.isSettled) {
            this._pages['delete'](i);
          }
        }

        for (var i = minLoadHorizon - 1; i >= minUnloadHorizon; i -= 1) {
          var page = this._findPage(i);

          if (page && !page.isSettled) {
            this._pages['delete'](i);
          }
        }

        for (var i = minUnloadHorizon - 1; i >= 0; i -= 1) {
          var page = this._findPage(i);

          if (page) {
            this._pages['delete'](i);

            if (page.isResolved) {
              unfetchable.push(page);
            }
          }
        }

        this._unfetchablePages = this._unfetchablePages.concat(unfetchable);
      }
    }, {
      key: '_requestHorizons',
      value: function _requestHorizons() {
        var _getLoadHorizons3 = this._getLoadHorizons();

        var minLoadHorizon = _getLoadHorizons3.minLoadHorizon;
        var maxLoadHorizon = _getLoadHorizons3.maxLoadHorizon;

        for (var i = minLoadHorizon; i < maxLoadHorizon; i += 1) {
          if (!this._findPage(i)) {
            this._pages.insert(i, new _page2['default'](i, this.pageSize));
          }
        }
      }
    }, {
      key: '_getLoadHorizons',
      value: function _getLoadHorizons() {
        var readOffset = this._virtualReadOffset();

        var min = readOffset - this.loadHorizon;
        var max = readOffset + this.loadHorizon;
        var minLoadPage = Math.floor(min / this.pageSize);
        var maxLoadPage = Math.ceil(max / this.pageSize);
        var minLoadHorizon = Math.max(minLoadPage, 0);
        var maxLoadHorizon = Math.min(this.stats.totalPages || Infinity, maxLoadPage);
        return {
          minLoadHorizon: minLoadHorizon,
          maxLoadHorizon: maxLoadHorizon
        };
      }
    }, {
      key: '_getUnloadHorizons',
      value: function _getUnloadHorizons() {
        var readOffset = this._virtualReadOffset();

        var min = readOffset - this.unloadHorizon;
        var max = readOffset + this.unloadHorizon;
        var minUnloadPage = Math.floor(min / this.pageSize);
        var maxUnloadPage = Math.ceil(max / this.pageSize);

        var maxNode = this._pages.tree.getMaxKeyDescendant();

        var maxPageOffset = maxNode.key && maxNode.key.page || 0;
        var minUnloadHorizon = Math.max(minUnloadPage, 0);
        var maxUnloadHorizon = Math.min(this.stats.totalPages || Infinity, maxUnloadPage, maxPageOffset + 1);
        return {
          minUnloadHorizon: minUnloadHorizon,
          maxUnloadHorizon: maxUnloadHorizon
        };
      }
    }, {
      key: 'pages',
      get: function get() {
        return this._pages.betweenBounds({
          $gte: 0
        });
      }
    }, {
      key: 'hasUnrequested',
      get: function get() {
        return this.pages.some(function (p) {
          return !p.isRequested;
        });
      }
    }, {
      key: 'hasRequested',
      get: function get() {
        return this.pages.some(function (p) {
          return p.isRequested;
        });
      }
    }, {
      key: 'hasPending',
      get: function get() {
        return this.pages.some(function (p) {
          return p.isPending;
        });
      }
    }, {
      key: 'hasResolved',
      get: function get() {
        return this.pages.some(function (p) {
          return p.isResolved;
        });
      }
    }, {
      key: 'hasRejected',
      get: function get() {
        return this.pages.some(function (p) {
          return p.isRejected;
        });
      }
    }, {
      key: 'hasUnfetchable',
      get: function get() {
        return !!this._unfetchablePages.length;
      }
    }, {
      key: 'unrequested',
      get: function get() {
        return this.pages.filter(function (p) {
          return !p.isRequested;
        });
      }
    }, {
      key: 'requested',
      get: function get() {
        return this.pages.filter(function (p) {
          return p.isRequested;
        });
      }
    }, {
      key: 'pending',
      get: function get() {
        return this.pages.filter(function (p) {
          return p.isPending;
        });
      }
    }, {
      key: 'resolved',
      get: function get() {
        return this.pages.filter(function (p) {
          return p.isResolved;
        });
      }
    }, {
      key: 'rejected',
      get: function get() {
        return this.pages.filter(function (p) {
          return p.isRejected;
        });
      }
    }, {
      key: 'unfetchable',
      get: function get() {
        return this._unfetchablePages;
      }
    }, {
      key: 'length',
      get: function get() {
        var _this6 = this;

        var node = this._pages.tree.getMaxKeyDescendant();

        var offset = node.key && node.key.page;
        var virtualTotalPages = offset + 1 || 0;
        var total = Math.max(virtualTotalPages, this.stats.totalPages || 0);
        return this.resolved.reduce(function (length, page) {
          return length - (_this6.pageSize - page.records.length);
        }, (total - this.rejected.length) * this.pageSize);
      }
    }]);

    return State;
  }();

  exports['default'] = State;
  ;
  (0, _cacheProperties2['default'])(State);
  module.exports = exports['default'];
});